namespace Logging.Helpers
{
    using System;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.Xml.Linq;
    using System.Text.Json;
    using System.Text.Encodings.Web;
    using System.Text.Unicode;
    using Microsoft.AspNetCore.Http;

    /// <summary>
    /// Clase estática para formatear los logs en un formato estructurado y legible.
    /// </summary>
    public static class LogFormatter
    {
        /// <summary>
        /// Configuración para serializar JSON con compatibilidad para caracteres especiales.
        /// </summary>
        private static readonly JsonSerializerOptions JsonOptions = new()
        {
            WriteIndented = true, // JSON con formato legible.
            Encoder = JavaScriptEncoder.Create(UnicodeRanges.All) // Permite caracteres especiales (ñ, á, é, í, ó, ú).
        };

        // ====================== SECCIÓN: LOG DE INICIO Y FIN ======================

        /// <summary>
        /// Formatea el inicio del log.
        /// </summary>
        public static string FormatBeginLog() =>
            $"---------------------------Inicio de Log---------------------------\n{DateTime.UtcNow}\n---------------------------Inicio de Log---------------------------\n";

        /// <summary>
        /// Formatea el final del log.
        /// </summary>
        public static string FormatEndLog() =>
            $"---------------------------Fin de Log---------------------------\n{DateTime.UtcNow}\n---------------------------Fin de Log---------------------------\n";

        // ====================== SECCIÓN: INFORMACIÓN DEL ENTORNO ======================

        public static string FormatEnvironmentInfoStart() =>
            $"---------------------------Environment Info-------------------------\nInicio: {DateTime.UtcNow}\n-------------------------------------------------------------------\n";

        public static string FormatEnvironmentInfoEnd() =>
            $"----------------------------Environment Info-------------------------\nFin: {DateTime.UtcNow}\n-------------------------------------------------------------------\n";

        public static string FormatEnvironmentInfo(
            string application, string environment, string contentRoot, string executionId,
            string clientIp, string userAgent, string machineName, string os, string host)
        {
            var sb = new StringBuilder();
            sb.AppendLine(FormatEnvironmentInfoStart());
            sb.AppendLine($"Application: {application}");
            sb.AppendLine($"Environment: {environment}");
            sb.AppendLine($"ContentRoot: {contentRoot}");
            sb.AppendLine($"Execution ID: {executionId}");
            sb.AppendLine($"Client IP: {clientIp}");
            sb.AppendLine($"User Agent: {userAgent}");
            sb.AppendLine($"Machine Name: {machineName}");
            sb.AppendLine($"OS: {os}");
            sb.AppendLine($"Host: {host}");
            sb.AppendLine(FormatEnvironmentInfoEnd());
            return sb.ToString();
        }

        // ====================== SECCIÓN: REQUEST Y RESPONSE ======================

        public static string FormatRequestInfo(HttpRequest request)
        {
            var sb = new StringBuilder();
            sb.AppendLine("----------------------------------Request Info---------------------------------");
            sb.AppendLine($"Inicio: {DateTime.UtcNow}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine($"IP: {request.HttpContext.Connection.RemoteIpAddress}");
            sb.AppendLine($"Method: {request.Method}");
            sb.AppendLine($"Query: {request.QueryString}");
            sb.AppendLine("Headers:");
            foreach (var header in request.Headers)
            {
                sb.AppendLine($"{header.Key}: {header.Value}");
            }
            sb.AppendLine("----------------------------------Request Info---------------------------------");
            sb.AppendLine($"Fin: {DateTime.UtcNow}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            return sb.ToString();
        }

        public static string FormatResponseInfo(HttpResponse response)
        {
            var sb = new StringBuilder();
            sb.AppendLine("----------------------------------Response Info---------------------------------");
            sb.AppendLine($"Inicio: {DateTime.UtcNow}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine($"StatusCode: {response.StatusCode}");
            sb.AppendLine("Headers:");
            foreach (var header in response.Headers)
            {
                sb.AppendLine($"{header.Key}: {header.Value}");
            }
            sb.AppendLine("----------------------------------Response Info---------------------------------");
            sb.AppendLine($"Fin: {DateTime.UtcNow}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            return sb.ToString();
        }

        // ====================== SECCIÓN: PARÁMETROS ======================

        public static string FormatInputParametersStart() =>
            $"-----------------------Parámetros de Entrada-----------------------\nInicio: {DateTime.UtcNow}\n-------------------------------------------------------------------\n";

        public static string FormatInputParametersEnd() =>
            $"-----------------------Parámetros de Entrada-----------------------\nFin: {DateTime.UtcNow}\n-------------------------------------------------------------------\n";

        public static string FormatInputParameters(string parameters)
        {
            var sb = new StringBuilder();
            sb.AppendLine(FormatInputParametersStart());
            sb.AppendLine(parameters);
            sb.AppendLine(FormatInputParametersEnd());
            return sb.ToString();
        }

        public static string FormatOutputParametersStart() =>
            $"-----------------------Parámetros de Salida-----------------------\nInicio: {DateTime.UtcNow}\n-------------------------------------------------------------------\n";

        public static string FormatOutputParametersEnd() =>
            $"-----------------------Parámetros de Salida-----------------------\nFin: {DateTime.UtcNow}\n-------------------------------------------------------------------\n";

        public static string FormatOutputParameters(string parameters)
        {
            var sb = new StringBuilder();
            sb.AppendLine(FormatOutputParametersStart());
            sb.AppendLine(parameters);
            sb.AppendLine(FormatOutputParametersEnd());
            return sb.ToString();
        }

        // ====================== SECCIÓN: LOGS MANUALES ======================

        public static string FormatSingleLog(string logMessage)
        {
            var sb = new StringBuilder();
            sb.AppendLine("----------------------------------Single Log---------------------------------");
            sb.AppendLine($"Inicio: {DateTime.UtcNow}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine(logMessage);
            sb.AppendLine("----------------------------------Single Log---------------------------------");
            sb.AppendLine($"Fin: {DateTime.UtcNow}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            return sb.ToString();
        }

        // ====================== SECCIÓN: LOGS DE OBJETOS ======================

        public static string FormatObjectLog(string objectName, object objectData)
        {
            string formattedData = ConvertObjectToString(objectData);

            var sb = new StringBuilder();
            sb.AppendLine($"----------------------------------Object -> {objectName}---------------------------------");
            sb.AppendLine($"Inicio: {DateTime.UtcNow}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine(formattedData);
            sb.AppendLine($"----------------------------------Object -> {objectName}---------------------------------");
            sb.AppendLine($"Fin: {DateTime.UtcNow}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            return sb.ToString();
        }

        private static string ConvertObjectToString(object obj)
        {
            if (obj == null)
                return "Objeto nulo";

            try
            {
                if (obj is string strData)
                {
                    return IsJson(strData) ? FormatJson(strData) :
                           IsXml(strData) ? FormatXml(strData) :
                           strData;
                }

                return JsonSerializer.Serialize(obj, JsonOptions);
            }
            catch (Exception ex)
            {
                return $"Error al convertir objeto: {ex.Message}";
            }
        }

        private static bool IsJson(string str) => JsonDocument.TryParseValue(ref new Utf8JsonReader(Encoding.UTF8.GetBytes(str)), out _);
        private static bool IsXml(string str) { try { XDocument.Parse(str); return true; } catch { return false; } }

        private static string FormatJson(string json) => JsonSerializer.Serialize(JsonDocument.Parse(json).RootElement, JsonOptions);
        private static string FormatXml(string xml) => XDocument.Parse(xml).ToString();
    }
}
