using Microsoft.AspNetCore.Mvc.Filters;
using System.Text.Json;
using System.Threading.Tasks;

public class LoggingActionFilter : IAsyncActionFilter
{
    private readonly LoggingService _loggingService;

    public LoggingActionFilter(LoggingService loggingService)
    {
        _loggingService = loggingService;
    }

    public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
    {
        var controllerName = context.Controller.GetType().Name;
        var actionName = context.ActionDescriptor.DisplayName;
        var methodFullName = $"{controllerName}.{actionName}";

        // Capturar parámetros de entrada
        var inputParams = context.ActionArguments.Any()
            ? JsonSerializer.Serialize(context.ActionArguments, new JsonSerializerOptions { WriteIndented = true })
            : "Sin parámetros";

        _loggingService.AddMethodEntryLog(methodFullName, inputParams);

        var executedContext = await next(); // Ejecuta el método de la API

        if (executedContext.Exception == null)
        {
            // Capturar resultado si no hay excepción
            var returnValue = executedContext.Result?.ToString() ?? "Sin retorno (void)";
            _loggingService.AddMethodExitLog(methodFullName, returnValue);
        }
        else
        {
            // Capturar excepciones
            _loggingService.AddExceptionLog(executedContext.Exception);
        }
    }
}
