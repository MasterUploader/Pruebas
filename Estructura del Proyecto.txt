using System;
using System.Text;

namespace Logging.Helpers
{
    /// <summary>
    /// Clase que proporciona métodos para formatear secciones del log.
    /// </summary>
    public static class LogFormatter
    {
        /// <summary>
        /// Genera el bloque de texto que indica el inicio del log.
        /// </summary>
        /// <returns>Texto formateado para el inicio del log.</returns>
        public static string FormatBeginLog()
        {
            var sb = new StringBuilder();
            sb.AppendLine("---------------------------Inicio de Log---------------------------");
            sb.AppendLine($"{DateTime.Now}");
            sb.AppendLine("---------------------------Inicio de Log---------------------------");
            sb.AppendLine();
            return sb.ToString();
        }
        
        /// <summary>
        /// Genera el bloque de texto que inicia la sección de información del entorno.
        /// </summary>
        /// <param name="application">Nombre de la aplicación.</param>
        /// <param name="env">Ambiente de ejecución (por ejemplo, Development, Production).</param>
        /// <param name="contentRoot">Directorio raíz del contenido.</param>
        /// <param name="executionId">Identificador de la ejecución.</param>
        /// <param name="clientIp">Dirección IP del cliente.</param>
        /// <param name="userAgent">Información del agente de usuario.</param>
        /// <param name="machineName">Nombre de la máquina.</param>
        /// <param name="os">Información del sistema operativo.</param>
        /// <param name="host">Host de la petición.</param>
        /// <param name="distribution">Información de distribución.</param>
        /// <returns>Texto formateado con la información del entorno.</returns>
        public static string FormatEnvironmentInfoStart(
            string application,
            string env,
            string contentRoot,
            string executionId,
            string clientIp,
            string userAgent,
            string machineName,
            string os,
            string host,
            string distribution)
        {
            var sb = new StringBuilder();
            sb.AppendLine("---------------------------Enviroment Info-------------------------");
            sb.AppendLine($"       Inicio: {DateTime.Now}");
            sb.AppendLine("-------------------------------------------------------------------");
            sb.AppendLine($"Application: {application}");
            sb.AppendLine($"Environment: {env}");
            sb.AppendLine($"ContentRoot: {contentRoot}");
            sb.AppendLine($"Execution ID: {executionId}");
            sb.AppendLine($"Client IP: {clientIp}");
            sb.AppendLine($"User Agent: {userAgent}");
            sb.AppendLine($"Machine Name: {machineName}");
            sb.AppendLine($"OS: {os}");
            sb.AppendLine($"Host: {host}");
            sb.AppendLine($"Distribución: {distribution}");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera el bloque de texto que finaliza la sección de información del entorno.
        /// </summary>
        /// <returns>Texto formateado indicando el fin de la sección de entorno.</returns>
        public static string FormatEnvironmentInfoEnd()
        {
            var sb = new StringBuilder();
            sb.AppendLine("----------------------------Enviroment Info-------------------------");
            sb.AppendLine($"       Fin: {DateTime.Now}");
            sb.AppendLine("-------------------------------------------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera el bloque de texto que indica el endpoint procesado.
        /// </summary>
        /// <param name="endpointName">El nombre o la ruta del endpoint.</param>
        /// <returns>Texto formateado con el endpoint.</returns>
        public static string FormatEndpoint(string endpointName)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"---------------------------Endpoint: {endpointName}---------------------------");
            sb.AppendLine($"{DateTime.Now}");
            sb.AppendLine($"---------------------------Endpoint: {endpointName}---------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera el bloque de texto que inicia la sección de información de la solicitud.
        /// </summary>
        /// <returns>Texto formateado indicando el inicio de la información de la solicitud.</returns>
        public static string FormatRequestInfoStart()
        {
            var sb = new StringBuilder();
            sb.AppendLine("----------------------------------Request Info---------------------------------");
            sb.AppendLine($"       Inicio: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera el bloque de texto que finaliza la sección de información de la solicitud.
        /// </summary>
        /// <returns>Texto formateado indicando el fin de la información de la solicitud.</returns>
        public static string FormatRequestInfoEnd()
        {
            var sb = new StringBuilder();
            sb.AppendLine("----------------------------------Request Info---------------------------------");
            sb.AppendLine($"       Fin: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera un bloque de texto para un log simple.
        /// </summary>
        /// <param name="message">El mensaje a registrar.</param>
        /// <returns>Texto formateado para un log simple.</returns>
        public static string FormatSingleLog(string message)
        {
            var sb = new StringBuilder();
            sb.AppendLine("----------------------------------Single Log---------------------------------");
            sb.AppendLine($"       Inicio: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine(message);
            sb.AppendLine();
            sb.AppendLine("----------------------------------Single Log---------------------------------");
            sb.AppendLine($"       Fin: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera un bloque de texto para registrar un objeto, serializado a JSON.
        /// </summary>
        /// <param name="objectName">El nombre identificador del objeto.</param>
        /// <param name="message">El contenido del objeto en formato de texto.</param>
        /// <returns>Texto formateado para el log del objeto.</returns>
        public static string FormatObjectLog(string objectName, string message)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"----------------------------------Object -> {objectName}---------------------------------");
            sb.AppendLine($"       Inicio: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine(message);
            sb.AppendLine();
            sb.AppendLine($"----------------------------------Object -> {objectName}---------------------------------");
            sb.AppendLine($"       Fin: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera un bloque de texto que marca el inicio de un método o función.
        /// </summary>
        /// <param name="methodName">El nombre del método o función.</param>
        /// <returns>Texto formateado indicando el inicio del método o función.</returns>
        public static string FormatMethodFunctionStart(string methodName)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"----------------------------------Método/Funcion : {methodName}---------------------------------");
            sb.AppendLine($"       Inicio: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera un bloque de texto para registrar los parámetros de entrada.
        /// </summary>
        /// <param name="parameters">Una cadena que representa los parámetros de entrada.</param>
        /// <returns>Texto formateado con los parámetros de entrada.</returns>
        public static string FormatInputParameters(string parameters)
        {
            var sb = new StringBuilder();
            sb.AppendLine("-----------------------Parámetros de Entrada-----------------------------------");
            sb.AppendLine(parameters);
            sb.AppendLine("-----------------------Parámetros de Entrada-----------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera un bloque de texto para registrar los parámetros de salida.
        /// </summary>
        /// <param name="parameters">Una cadena que representa los parámetros de salida.</param>
        /// <returns>Texto formateado con los parámetros de salida.</returns>
        public static string FormatOutputParameters(string parameters)
        {
            var sb = new StringBuilder();
            sb.AppendLine("-----------------------Parámetros de Salida-----------------------------------");
            sb.AppendLine(parameters);
            sb.AppendLine("-----------------------Parámetros de Salida-----------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera un bloque de texto que marca el final de un método o función.
        /// </summary>
        /// <param name="methodName">El nombre del método o función.</param>
        /// <returns>Texto formateado indicando el final del método o función.</returns>
        public static string FormatMethodFunctionEnd(string methodName)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"----------------------------------Método/Funcion : {methodName}---------------------------------");
            sb.AppendLine($"       Fin: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera un bloque de texto para registrar la información de la respuesta.
        /// </summary>
        /// <param name="message">El mensaje o datos de la respuesta.</param>
        /// <returns>Texto formateado para el log de la respuesta.</returns>
        public static string FormatResponseInfo(string message)
        {
            var sb = new StringBuilder();
            sb.AppendLine("----------------------------------Response Info---------------------------------");
            sb.AppendLine($"       Inicio: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine(message);
            sb.AppendLine();
            sb.AppendLine("----------------------------------Response Info---------------------------------");
            sb.AppendLine($"       Fin: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera un bloque de texto para registrar los detalles de una excepción.
        /// </summary>
        /// <param name="message">El mensaje de la excepción.</param>
        /// <returns>Texto formateado para el log de excepciones.</returns>
        public static string FormatExceptionDetails(string message)
        {
            var sb = new StringBuilder();
            sb.AppendLine("----------------------------------Exception Details---------------------------------");
            sb.AppendLine($"       Inicio: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine(message);
            sb.AppendLine();
            sb.AppendLine("----------------------------------Exception Details---------------------------------");
            sb.AppendLine($"       Fin: {DateTime.Now}");
            sb.AppendLine("-----------------------------------------------------------------------------");
            sb.AppendLine();
            return sb.ToString();
        }

        /// <summary>
        /// Genera el bloque de texto final que indica el cierre del log.
        /// </summary>
        /// <returns>Texto formateado indicando el fin del log.</returns>
        public static string FormatEndLog()
        {
            var sb = new StringBuilder();
            sb.AppendLine("---------------------------Fin de Log---------------------------");
            sb.AppendLine($"{DateTime.Now}");
            sb.AppendLine("---------------------------Fin de Log---------------------------");
            return sb.ToString();
        }
    }
}
