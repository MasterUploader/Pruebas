using Logging.Abstractions;
using Logging.Helpers;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Controllers;
using System.Diagnostics;
using System.Linq;
using System.Text.Json;

namespace Logging.Filters
{
    /// <summary>
    /// Filtro de acción que se ejecuta antes y después de la acción de un controlador.
    /// Se encarga de capturar y registrar los parámetros de entrada, la salida y el tiempo de ejecución.
    /// Además, utiliza scopes anidados para mantener la jerarquía del flujo de ejecución.
    /// </summary>
    public class LoggingActionFilter : IActionFilter
    {
        // Servicio de logging para registrar la información en los logs.
        private readonly ILoggingService _loggingService;
        // Nombre del controlador, obtenido del descriptor de acción.
        private readonly string _controllerName;
        // Nombre de la acción (método) del controlador.
        private readonly string _actionName;
        // Objeto para medir el tiempo de ejecución de la acción.
        private Stopwatch _stopwatch;

        /// <summary>
        /// Constructor que inicializa el filtro de acción con el servicio de logging y obtiene
        /// el nombre del controlador y de la acción a partir del ActionDescriptor.
        /// </summary>
        /// <param name="loggingService">Servicio de logging inyectado.</param>
        /// <param name="actionDescriptor">Descriptor de la acción, que contiene información sobre el controlador y la acción.</param>
        public LoggingActionFilter(ILoggingService loggingService, ActionDescriptor actionDescriptor)
        {
            _loggingService = loggingService;
            // Extrae el nombre del controlador del diccionario RouteValues.
            _controllerName = actionDescriptor.RouteValues["controller"];
            // Extrae el nombre de la acción del diccionario RouteValues.
            _actionName = actionDescriptor.RouteValues["action"];
        }

        /// <summary>
        /// Se ejecuta antes de que se invoque la acción del controlador.
        /// Aquí se inicia la medición del tiempo, se capturan y registran los parámetros de entrada,
        /// y se registra un log indicando el inicio de la ejecución.
        /// </summary>
        /// <param name="context">Contexto de ejecución de la acción.</param>
        public void OnActionExecuting(ActionExecutingContext context)
        {
            try
            {
                // Se crea un nuevo scope para este método, aumentando la indentación para reflejar la jerarquía.
                using (new LogScope())
                {
                    // Se inicia el cronómetro para medir el tiempo de ejecución de la acción.
                    _stopwatch = Stopwatch.StartNew();

                    // Se registran los parámetros de entrada.
                    // Se recorre cada argumento y se serializa a JSON si no es nulo, de lo contrario se marca como "Desconocido".
                    var inputParams = string.Join(System.Environment.NewLine,
                        context.ActionArguments.Select(arg =>
                            $"{arg.Key} = {(arg.Value != null ? JsonSerializer.Serialize(arg.Value, new JsonSerializerOptions { WriteIndented = true }) : "Desconocido") }"));
                    
                    // Se agrega un log con los parámetros de entrada.
                    _loggingService.AddInputParameters(inputParams);

                    // Se registra un log indicando el inicio de la ejecución de la acción.
                    _loggingService.AddSingleLog($"Inicio de ejecución en Controller: {_controllerName}, Action: {_actionName}");
                }
            }
            catch (System.Exception ex)
            {
                // Si ocurre alguna excepción durante la captura o el registro, se registra la excepción en el log.
                _loggingService.AddExceptionLog(ex);
            }
        }

        /// <summary>
        /// Se ejecuta después de que se ha invocado la acción del controlador.
        /// Aquí se detiene el cronómetro, se capturan y registran los parámetros de salida, y se registra un log
        /// indicando el fin de la ejecución y el tiempo transcurrido.
        /// </summary>
        /// <param name="context">Contexto de ejecución de la acción, que incluye el resultado de la acción.</param>
        public void OnActionExecuted(ActionExecutedContext context)
        {
            try
            {
                // Se crea un nuevo scope para este método, lo que aumenta la indentación.
                using (new LogScope())
                {
                    // Se detiene el cronómetro y se obtiene el tiempo transcurrido.
                    _stopwatch.Stop();

                    // Se intenta capturar el resultado de la acción.
                    // Si el resultado es un ObjectResult, se serializa su valor a JSON para tener un registro legible.
                    string outputParams = "Sin datos de salida";
                    if (context.Result is ObjectResult objectResult && objectResult.Value != null)
                    {
                        outputParams = JsonSerializer.Serialize(objectResult.Value, new JsonSerializerOptions { WriteIndented = true });
                    }
                    
                    // Se registra un log con los parámetros de salida.
                    _loggingService.AddOutputParameters(outputParams);

                    // Se registra un log indicando el fin de la ejecución, junto con el tiempo transcurrido en milisegundos.
                    _loggingService.AddSingleLog($"Fin de ejecución en Controller: {_controllerName}, Action: {_actionName} en {_stopwatch.ElapsedMilliseconds} ms");
                }
            }
            catch (System.Exception ex)
            {
                // Si ocurre alguna excepción durante este proceso, se registra en el log.
                _loggingService.AddExceptionLog(ex);
            }
        }
    }
}
