using Logging.Abstractions;
using Logging.Helpers;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Mvc.Filters;
using System;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;

namespace Logging.Filters
{
    /// <summary>
    /// Filtro de acción que intercepta la ejecución de los controladores
    /// y registra automáticamente el flujo de métodos, los parámetros de entrada y salida.
    /// </summary>
    public class LoggingActionFilter : IAsyncActionFilter
    {
        private readonly ILoggingService _loggingService;

        /// <summary>
        /// Constructor que recibe el servicio de logging.
        /// </summary>
        public LoggingActionFilter(ILoggingService loggingService)
        {
            _loggingService = loggingService;
        }

        /// <summary>
        /// Método que intercepta la ejecución de una acción en un controlador.
        /// Captura la entrada, la salida y las excepciones.
        /// </summary>
        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            string controllerName = ((ControllerActionDescriptor)context.ActionDescriptor).ControllerName;
            string actionName = ((ControllerActionDescriptor)context.ActionDescriptor).ActionName;
            string methodFullName = $"{controllerName}.{actionName}";

            // Capturar parámetros de entrada
            var inputParams = context.ActionArguments.Any()
                ? JsonSerializer.Serialize(context.ActionArguments, new JsonSerializerOptions { WriteIndented = true })
                : "Sin parámetros.";

            _loggingService.AddMethodEntryLog(methodFullName, inputParams);

            // Continuar con la ejecución del método
            var executedContext = await next();

            if (executedContext.Exception == null)
            {
                // Capturar resultado si no hay excepción
                var returnValue = executedContext.Result;
                _loggingService.AddMethodExitLog(methodFullName, returnValue);
            }
            else
            {
                // Capturar excepciones
                _loggingService.AddExceptionLog(executedContext.Exception);
            }
        }
    }
}
