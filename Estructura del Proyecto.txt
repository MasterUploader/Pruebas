public static string FormatJson(string json, int indentationLevel = 8)
{
    try
    {
        using var jsonDoc = JsonDocument.Parse(json);
        string formattedJson = JsonSerializer.Serialize(jsonDoc, new JsonSerializerOptions
        {
            WriteIndented = true,
            Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        });

        string indent = new string(' ', indentationLevel); // Espacios de indentaciÃ³n

        // ðŸ”¹ Divide el JSON en lÃ­neas
        string[] lines = formattedJson.Split(Environment.NewLine);

        // ðŸ”¹ Primera lÃ­nea queda sin espacios adicionales, solo se agregan a las siguientes lÃ­neas
        for (int i = 1; i < lines.Length; i++)
        {
            lines[i] = indent + lines[i]; // Aplica la indentaciÃ³n en todas las lÃ­neas excepto la primera
        }

        return Environment.NewLine + string.Join(Environment.NewLine, lines);
    }
    catch
    {
        return json; // Si el JSON no es vÃ¡lido, devuelve el texto original
    }
}
