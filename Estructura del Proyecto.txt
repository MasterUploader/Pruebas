namespace Logging.Filters
{
    using Logging.Abstractions;
    using Microsoft.AspNetCore.Mvc.Abstractions;
    using Microsoft.AspNetCore.Mvc.Filters;
    using System.Diagnostics;
    using System.Linq;
    using System.Text.Json;

    /// <summary>
    /// Filtro de acción que se ejecuta antes y después de una acción en un controlador.
    /// Captura información sobre los parámetros de entrada y salida, registra el tiempo de ejecución
    /// y utiliza scopes anidados para reflejar la jerarquía del flujo de ejecución.
    /// </summary>
    public class LoggingActionFilter : IActionFilter
    {
        private readonly ILoggingService _loggingService;
        private string _controllerName = "Desconocido"; // Evita error CS8618 inicializando con un valor predeterminado.
        private string _actionName = "Desconocido"; // Evita error CS8618 inicializando con un valor predeterminado.
        private Stopwatch _stopwatch = new(); // Se inicializa para evitar CS8618.

        // Instancia estática de JsonSerializerOptions para evitar creaciones innecesarias.
        private static readonly JsonSerializerOptions SerializerOptions = new() { WriteIndented = true };

        /// <summary>
        /// Constructor del filtro de logging.
        /// </summary>
        /// <param name="loggingService">Servicio de logging utilizado para registrar la ejecución.</param>
        public LoggingActionFilter(ILoggingService loggingService)
        {
            _loggingService = loggingService;
        }

        /// <summary>
        /// Se ejecuta antes de que se invoque la acción del controlador.
        /// Captura el nombre del controlador y de la acción, y registra los parámetros de entrada.
        /// </summary>
        /// <param name="context">Contexto de ejecución de la acción, que contiene información de la solicitud.</param>
        public void OnActionExecuting(ActionExecutingContext context)
        {
            try
            {
                // Crea un scope anidado para reflejar la jerarquía de ejecución en los logs.
                using var scope = new LogScope();

                // Inicia un cronómetro para medir el tiempo de ejecución de la acción.
                _stopwatch.Restart();

                // Obtiene el nombre del controlador y de la acción desde el contexto.
                _controllerName = context.ActionDescriptor.RouteValues["controller"] ?? "Desconocido";
                _actionName = context.ActionDescriptor.RouteValues["action"] ?? "Desconocido";

                // Serializa los parámetros de entrada utilizando la instancia estática de SerializerOptions.
                var inputParams = string.Join(System.Environment.NewLine,
                    context.ActionArguments.Select(arg =>
                        $"{arg.Key} = {(arg.Value != null ? JsonSerializer.Serialize(arg.Value, SerializerOptions) : "Desconocido") }"));

                // Registra los parámetros de entrada.
                _loggingService.AddInputParameters(inputParams);

                // Registra el inicio de ejecución de la acción.
                _loggingService.AddSingleLog($"Inicio de ejecución en Controller: {_controllerName}, Action: {_actionName}");
            }
            catch (System.Exception ex)
            {
                // En caso de error, se registra la excepción en el log.
                _loggingService.AddExceptionLog(ex);
            }
        }

        /// <summary>
        /// Se ejecuta después de que se ha completado la ejecución de la acción.
        /// Captura los parámetros de salida, el tiempo total de ejecución y registra la finalización de la acción.
        /// </summary>
        /// <param name="context">Contexto de ejecución de la acción, que contiene el resultado de la acción.</param>
        public void OnActionExecuted(ActionExecutedContext context)
        {
            try
            {
                // Crea un scope anidado para reflejar la jerarquía en los logs.
                using var scope = new LogScope();

                // Detiene el cronómetro y obtiene el tiempo total de ejecución.
                _stopwatch.Stop();

                // Captura el resultado de la acción (si es un ObjectResult).
                string outputParams = "Sin datos de salida";
                if (context.Result is ObjectResult objectResult && objectResult.Value != null)
                {
                    outputParams = JsonSerializer.Serialize(objectResult.Value, SerializerOptions);
                }

                // Registra los parámetros de salida.
                _loggingService.AddOutputParameters(outputParams);

                // Registra el final de la ejecución con el tiempo transcurrido en milisegundos.
                _loggingService.AddSingleLog($"Fin de ejecución en Controller: {_controllerName}, Action: {_actionName} en {_stopwatch.ElapsedMilliseconds} ms");
            }
            catch (System.Exception ex)
            {
                // Registra cualquier error ocurrido durante la ejecución de la acción.
                _loggingService.AddExceptionLog(ex);
            }
        }
    }
}
