namespace Logging.Abstractions
{
    using Microsoft.AspNetCore.Http;
    using System;

    /// <summary>
    /// Define las operaciones de logging que pueden ser utilizadas para capturar eventos,
    /// solicitudes HTTP, respuestas, excepciones y otros registros dentro de la API.
    /// </summary>
    public interface ILoggingService
    {
        /// <summary>
        /// Escribe un log completo en un archivo único basado en la petición actual.
        /// </summary>
        /// <param name="context">El contexto HTTP de la petición.</param>
        /// <param name="logContent">El contenido del log a registrar.</param>
        void WriteLog(HttpContext context, string logContent);

        /// <summary>
        /// Escribe un log con un mensaje de texto simple.
        /// </summary>
        /// <param name="logMessage">Mensaje a registrar en el log.</param>
        void AddSingleLog(string logMessage);

        /// <summary>
        /// Registra un objeto en el log, permitiendo serialización en JSON o XML.
        /// </summary>
        /// <param name="objectName">Nombre identificador del objeto.</param>
        /// <param name="logObject">Objeto que se registrará en el log.</param>
        void AddObjLog(string objectName, object logObject);

        /// <summary>
        /// Registra la información de una respuesta HTTP.
        /// </summary>
        /// <param name="logMessage">Datos de la respuesta HTTP a registrar.</param>
        void AddResponseLog(string logMessage);

        /// <summary>
        /// Registra información del entorno de ejecución, incluyendo detalles de la API y el sistema.
        /// </summary>
        /// <param name="applicationName">Nombre de la aplicación.</param>
        /// <param name="environment">Nombre del entorno (Development, Staging, Production).</param>
        /// <param name="contentRootPath">Ruta raíz del contenido de la aplicación.</param>
        void AddEnvironmentLog(string applicationName, string environment, string contentRootPath);

        /// <summary>
        /// Registra la información de una excepción en los logs.
        /// </summary>
        /// <param name="ex">Excepción a registrar.</param>
        void AddExceptionLog(Exception ex);

        /// <summary>
        /// Registra los parámetros de entrada de un método.
        /// </summary>
        /// <param name="parameters">Lista de parámetros en formato string.</param>
        void AddInputParameters(string parameters);

        /// <summary>
        /// Registra los parámetros de salida de un método.
        /// </summary>
        /// <param name="parameters">Lista de parámetros de salida en formato string.</param>
        void AddOutputParameters(string parameters);
    }
}
