public async Task<string> CaptureMethodInputAsync()
{
    object[] methodParameters = GetMethodParameters();

    string formattedParams;

    if (methodParameters == null || methodParameters.Length == 0)
    {
        formattedParams = "Sin parámetros";
    }
    else
    {
        try
        {
            var options = new JsonSerializerOptions 
            { 
                WriteIndented = true, 
                ReferenceHandler = ReferenceHandler.Preserve 
            };
            formattedParams = JsonSerializer.Serialize(methodParameters, options);
        }
        catch (Exception ex)
        {
            formattedParams = $"Error al serializar parámetros: {ex.Message}";
        }
    }

    return $@"
-------------------------------------------------
Método/Función : {nameof(CaptureMethodInputAsync)}
-------------------------------------------------
Inicio: {DateTime.Now}
-------------------------------------------------
-------------------Parámetros de Entrada-------------------
Parámetros de Entrada: {formattedParams}
-------------------Parámetros de Entrada-------------------
-------------------------------------------------
Fin: {DateTime.Now}
-------------------------------------------------
";
}



private object[] GetMethodParameters()
{
    var stackTrace = new StackTrace();
    var frames = stackTrace.GetFrames();

    foreach (var frame in frames)
    {
        var method = frame.GetMethod();
        if (method != null && method.DeclaringType != null && method.DeclaringType.Namespace?.StartsWith("TuNamespace") == true)
        {
            var parameters = method.GetParameters();
            var values = new List<object>();

            foreach (var param in parameters)
            {
                object value = Activator.CreateInstance(param.ParameterType);
                values.Add(value);
            }

            return values.ToArray();
        }
    }

    return new object[] { "Sin parámetros" };
}




public async Task<string> CaptureMethodOutputAsync(object? outputResult)
{
    string formattedOutput;

    if (outputResult == null)
    {
        formattedOutput = "Sin retorno (void)";
    }
    else if (outputResult is Task task)
    {
        var taskType = task.GetType();
        if (taskType.IsGenericType)
        {
            var resultProperty = taskType.GetProperty("Result");
            if (resultProperty != null)
            {
                outputResult = resultProperty.GetValue(task);
            }
        }
        else
        {
            await task;
            formattedOutput = "Sin retorno (async void)";
        }
    }

    try
    {
        var options = new JsonSerializerOptions 
        { 
            WriteIndented = true, 
            ReferenceHandler = ReferenceHandler.Preserve 
        };
        formattedOutput = JsonSerializer.Serialize(outputResult, options);
    }
    catch (Exception ex)
    {
        formattedOutput = $"Error al serializar salida: {ex.Message}";
    }

    return $@"
-------------------------------------------------
Método/Función : {nameof(CaptureMethodOutputAsync)}
-------------------------------------------------
Inicio: {DateTime.Now}
-------------------------------------------------
-------------------Parámetros de Salida-------------------
Parámetros de Salida: {formattedOutput}
-------------------Parámetros de Salida-------------------
-------------------------------------------------
Fin: {DateTime.Now}
-------------------------------------------------
";
}




public async Task InvokeAsync(HttpContext context)
{
    string methodEntryLog = await CaptureMethodInputAsync();
    await _loggingService.LogAsync(methodEntryLog);

    object? outputResult = null;
    Exception? capturedException = null;

    try
    {
        await _next(context); // Ejecutar el siguiente middleware
    }
    catch (Exception ex)
    {
        capturedException = ex;
        throw;
    }
    finally
    {
        if (context.Response.HasStarted)
        {
            outputResult = context.Response;
        }

        string methodExitLog = await CaptureMethodOutputAsync(outputResult);
        await _loggingService.LogAsync(methodExitLog);

        if (capturedException != null)
        {
            string exceptionLog = LogFormatter.FormatExceptionDetails(capturedException);
            await _loggingService.LogAsync(exceptionLog);
        }
    }
}

