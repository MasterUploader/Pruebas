using Logging.Abstractions;
using Logging.Configuration;
using Logging.Filters;
using Logging.Middleware;
using Logging.Services;

var builder = WebApplication.CreateBuilder(args);

// Configura LoggingOptions a partir de la sección "LoggingOptions" en el appsettings.json.
builder.Services.Configure<LoggingOptions>(builder.Configuration.GetSection("LoggingOptions"));

// Registra IHttpContextAccessor para acceder al HttpContext en el servicio de logging.
builder.Services.AddHttpContextAccessor();

// Registra el servicio de logging. La implementación utilizará la configuración inyectada (IOptions<LoggingOptions>)
// y la información del entorno (IHostEnvironment).
builder.Services.AddSingleton<ILoggingService, LoggingService>();

// Registra los controladores y añade el filtro de acción global para el logging (opcional).
builder.Services.AddControllers(options =>
{
    options.Filters.Add<LoggingActionFilter>();
});

var app = builder.Build();

// Agrega el middleware de logging al pipeline.
// Este middleware intercepta cada solicitud para generar un log completo.
app.UseMiddleware<LoggingMiddleware>();

app.UseRouting();

app.UseEndpoints(endpoints =>
{
    endpoints.MapControllers();
});

app.Run();


{
  "LoggingOptions": {
    "BaseLogDirectory": "C:\\Logs\\"
  },
  // Otras configuraciones...
}
